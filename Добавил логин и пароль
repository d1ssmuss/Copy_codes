import pygame
import itertools

# Initialize Pygame
pygame.init()

# Переменные
WINDOW_SIZE = (800, 800)
GRID_SIZE = 8
SQUARE_SIZE = WINDOW_SIZE[0] // GRID_SIZE  # 100

# Зачем тут цвета?
BLACK = (0, 0, 0)
SIZE = (1280, 800)  # пока использую это, для панели справа
# Создание окна
# screen = pygame.display.set_mode(WINDOW_SIZE, pygame.NOFRAME)
screen = pygame.display.set_mode(SIZE)
pygame.display.set_caption("Шахматы v1.0 by d1ssmuss")

# Текстуры фигур
board_image = pygame.image.load('Chess/Board.jpg') # доска
king_image = pygame.image.load('Chess/wK.png') # белый король
black_king_image = pygame.image.load('Chess/BK.png') # чёрный король
black_night_image = pygame.image.load("Chess/BN.png") # черный конь
white_rook_image = pygame.image.load("Chess/wR.png") # белая ладья

# Преобразовываем изображения, учитывая масштаб
king_image = pygame.transform.smoothscale(king_image.convert_alpha(), (SQUARE_SIZE, SQUARE_SIZE))
black_king_image = pygame.transform.smoothscale(black_king_image.convert_alpha(), (SQUARE_SIZE, SQUARE_SIZE))
black_night_image = pygame.transform.smoothscale(black_night_image.convert_alpha(), (SQUARE_SIZE, SQUARE_SIZE))
white_rook_image = pygame.transform.smoothscale(white_rook_image.convert_alpha(), (SQUARE_SIZE, SQUARE_SIZE))

# Расположение шахматных фигур X, Y
# Обратить внимание что начало координат начинается с левого верхнего угла
bg = pygame.image.load("Chess\BACKGROUND.jpg")
white_king_pos = (7, 4)
black_king_pos = (0, 4)
black_night_pos_1 = (0, 1)
black_night_pos_2 = (0, 6)
white_rook_pos = (7, 7)

initial_pos_king = True
initial_pos_rook = True
selected_piece = None  # Отслеживание какая фигура выбрана
selected_square = None  # ????
player = None # Кто ходит первый

# Initialize font
font_numbers = pygame.font.Font(None, 35)
font_letters = pygame.font.Font(None, 35)
font_input = pygame.font.Font(None, 36)

board = [
    ["", "♞", "", "", "♚", "", "♞", ""],
    ["", "", "", "", "", "", "", ""],
    ["", "", "", "", "", "", "", ""],
    ["", "", "", "", "", "", "", ""],
    ["", "", "", "", "", "", "", ""],
    ["", "", "", "", "", "", "", ""],
    ["", "", "", "", "", "", "", ""],
    ["", "", "", "", "♔", "", "", "♖"]
]

# Function to draw the chessboard
def draw_board():
    # Draw the board image as background
    screen.blit(board_image, (0, 0))
    # Draw letters and numbers on the board
    for i in range(GRID_SIZE):
        # Draw numbers on the left side
        color_for_black_square = (157, 107, 70, 255)  # Blue color for letters
        color_for_white_square = (238, 218, 183, 255)  # Blue color for letters
        if i % 2 == 0:
            number_text = font_numbers.render(str(GRID_SIZE - i), True, color_for_white_square)
            letter_text = font_letters.render(chr(97 + i), True, color_for_white_square)  # 97 is the ASCII value for 'a'
        else:
            number_text = font_numbers.render(str(GRID_SIZE - i), True, color_for_black_square)
            letter_text = font_letters.render(chr(97 + i), True, color_for_black_square)  # 97 is the ASCII value for 'a'
        screen.blit(number_text, (785, (i * SQUARE_SIZE + SQUARE_SIZE // 2 - number_text.get_height() // 2) - 35))
        screen.blit(letter_text,
                    ((i * SQUARE_SIZE + SQUARE_SIZE // 2 - letter_text.get_width() // 2) - 40,
                     WINDOW_SIZE[0] - 27))  # Adjust the position as needed

dict_letters = {
    0 : "a",
    1 : "b",
    2 : "c",
    3 : "d",
    4 : "e",
    5 : "f",
    6 : "g",
    7 : "h"
}
def draw_moves_king(x, y):  # отрисовка ходов короля
    global initial_pos_rook, initial_pos_king
    # (для теста) нужно брать, если король у края доски
    possible_moves_king = []
    # Ход рокировки
    # если позиция короля изначальная и позиция ладьи изначальная
    if initial_pos_king == True and initial_pos_rook == True:
        pygame.draw.circle(screen, (50, 212, 45), [6 * SQUARE_SIZE + SQUARE_SIZE // 2, 7 * SQUARE_SIZE + SQUARE_SIZE // 2], 15)
        possible_moves_king.append([dict_letters[6], 1])

    # передаю внутри функции координаты короля
    for j in range(y-1, y+2): # y
        for i in range(x-1, x+2): # x
            if (0 <= i <= 7 and 0 <= j <= 7) and (i != x or y != j):
                possible_moves_king.append([dict_letters[j], 8 - i])
                # pygame.draw.circle(screen, (230, 50, 230), [white_king_pos[1] * SQUARE_SIZE + SQUARE_SIZE // 2, white_king_pos[0] * SQUARE_SIZE + SQUARE_SIZE // 2], 20)
                pygame.draw.circle(screen, (50, 212, 45), [j * SQUARE_SIZE + SQUARE_SIZE // 2, (i) * SQUARE_SIZE + SQUARE_SIZE // 2], 15)
    return f"{possible_moves_king}, Расположение Короля {dict_letters[y]}{8-x}, len:{len(possible_moves_king)}"
    # вроде работает

def draw_moves_knight(x,y): # отрисовка ходов коня
    # pos_0, pos_1 = 8 - y, 8 - x
    possible_moves_knight = []
    # создаю массив направлений атаки и потом через абс(модуль) ищу доступные ходы
    attack_moves = []
    deltas = [(-2, -1), (-2, +1), (+2, -1), (+2, +1), (-1, -2), (-1, +2), (+1, -2), (+1, +2)]
    moves = list(itertools.product([x-1, x+1],[y-2, y+2])) + list(itertools.product([x-2,x+2],[y-1,y+1]))
    moves = [(x,y) for x,y in moves if x >= 0 and y >= 0 and x < 8 and y < 8] # внутри цифры
    moves_letters = [(dict_letters[y], 8 - x) for x,y in moves if x >= 0 and y >= 0 and x < 8 and y < 8]
    for a,b in moves:
        pygame.draw.circle(screen, (50, 212, 45), [a * SQUARE_SIZE + SQUARE_SIZE // 2, b * SQUARE_SIZE + SQUARE_SIZE // 2], 15)
    """try:
        return f"{moves_letters}, Расположение Коня: {dict_letters[y]}{8-x} , len:{len(moves)}"
    except:
        return ValueError"""
    return f"{moves_letters}, Расположение Коня: {dict_letters[y]}{8-x} , len:{len(moves)}"

def draw_moves_rook(x, y):  # отрисовка ходов ладьи
    global initial_pos_rook
    possible_moves_rook = []
    # передаю внутри функции координаты короля
    for j in range(0, 8): # y
        for i in range(0, 8): # x
            if (0 <= i <= 7 and 0 <= j <= 7) and (i != x or y != j) and (x == i and j != y or x != i and j == y):
                possible_moves_rook.append([dict_letters[j], 8 - i])
                pygame.draw.circle(screen, (50, 212, 45), [j * SQUARE_SIZE + SQUARE_SIZE // 2, (i) * SQUARE_SIZE + SQUARE_SIZE // 2], 15)
    initial_pos_rook = False
    return f"{possible_moves_rook}, Расположение Ладьи {dict_letters[y]}{8-x}, len:{len(possible_moves_rook)}"

current_mouse_pos = (0, 0)

# Функция для отображения окна регистрации
def show_registration_window():
    login_input = ""
    password_input = ""
    input_active = "login"
    error_message = ""
    running = True

    login_rect = pygame.Rect(420, 320, 200, 30)
    password_rect = pygame.Rect(450, 380, 200, 30)

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            elif event.type == pygame.KEYDOWN:
                if input_active == "login":
                    if event.key == pygame.K_RETURN:
                        input_active = "password"
                    elif event.key == pygame.K_BACKSPACE:
                        login_input = login_input[:-1]
                    else:
                        login_input += event.unicode
                elif input_active == "password":
                    if event.key == pygame.K_RETURN:
                        if login_input and password_input:
                            running = False
                        else:
                            error_message = "Login and password cannot be empty!"
                    elif event.key == pygame.K_BACKSPACE:
                        password_input = password_input[:-1]
                    else:
                        password_input += event.unicode
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if login_rect.collidepoint(event.pos):
                    input_active = "login"
                elif password_rect.collidepoint(event.pos):
                    input_active = "password"

        screen.fill(BLACK)
        pygame.draw.rect(screen, (255, 255, 255), (300, 300, 600, 200))

        login_text = font_input.render("Логин:", True, (0, 0, 0))
        password_text = font_input.render("Пароль:", True, (0, 0, 0))
        login_input_text = font_input.render(login_input, True, (0, 0, 0))
        password_input_text = font_input.render("*" * len(password_input), True, (0, 0, 0))
        error_text = font_input.render(error_message, True, (255, 0, 0))

        screen.blit(login_text, (320, 320))
        screen.blit(password_text, (320, 380))
        screen.blit(login_input_text, (420, 320))
        screen.blit(password_input_text, (450, 380))
        screen.blit(error_text, (320, 440))

        if input_active == "login":
            pygame.draw.rect(screen, (0, 255, 0), login_rect, 2) # здесь цифра показывает жирность линии
        elif input_active == "password":
            pygame.draw.rect(screen, (0, 255, 0), password_rect, 2) # здесь цифра показывает жирность линии

        pygame.display.flip()

    # После успешного ввода перейти к основному окну с шахматной доской
    main_game_loop()

# Главный цикл игры
def main_game_loop():
    global white_king_pos, black_king_pos, black_night_pos_1, black_night_pos_2, white_king_pos
    global white_rook_pos
    global selected_piece
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = event.pos
                column = mouse_x // SQUARE_SIZE
                row = mouse_y // SQUARE_SIZE

                # Если фигура выбрана
                if selected_piece:
                    # Move the selected piece to the clicked square
                    if selected_piece == 'white_king' and (abs(row - white_king_pos[0]) <= 1 and abs(column - white_king_pos[1]) <= 1):
                        white_king_pos = (row, column)
                        print("фигуру поставили")
                        if not ((abs(row - white_king_pos[0]) == 0 and abs(column - white_king_pos[1]) == 0)) and initial_pos_rook:
                            initial_pos_king = False
                        # Вызываю функцию отображения квадратов(клеток), куда может ходить король
                        print(draw_moves_king(row,column), row, column)

                    elif selected_piece == 'black_king' and (abs(row - black_king_pos[0]) <= 1 and abs(column - black_king_pos[1]) <= 1):
                        black_king_pos = (row, column)
                        print("фигуру поставили")

                    elif selected_piece == 'white_rook' and (row == white_rook_pos[0] or column == white_rook_pos[1]):
                        white_rook_pos = (row, column)

                        # Вызываю функцию отображения квадратов(клеток), куда может ходить ладья
                        print(draw_moves_rook(row,column))
                        print("фигуру поставили")

                    elif selected_piece == 'black_night_1' or selected_piece == "black_night_2":
                        black_night_pos_1 = (row, column)

                        # Вызываю функцию отображения квадратов(клеток), куда может ходить ладья
                        print(draw_moves_knight(row,column))
                        print("фигуру поставили")

                    # Deselect the piece
                    selected_piece = None
                else:
                    # Select a piece if clicked
                    if (row, column) == white_king_pos:
                        selected_piece = 'white_king'
                        print("Взяли Белого Короля")
                    elif (row, column) == black_king_pos:
                        selected_piece = 'black_king'
                        print("Взят Чёрный Король")
                    elif (row, column) == white_rook_pos:
                        selected_piece = 'white_rook'
                        print("Взята Белая Ладья")
                    elif (row, column) == black_night_pos_1:
                        selected_piece = 'black_night_1'
                        print("Взят Чёрный Конь")

        # Clear the screen
        screen.fill(BLACK)

        # Draw the board and the pieces
        screen.blit(bg, (0,0))
        draw_board()

        # Draw the white king at its current position
        white_king_rect = pygame.Rect(white_king_pos[1] * SQUARE_SIZE, white_king_pos[0] * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
        screen.blit(king_image, white_king_rect.topleft)

        # Draw the black king at its current position
        black_king_rect = pygame.Rect(black_king_pos[1] * SQUARE_SIZE, black_king_pos[0] * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
        screen.blit(black_king_image, black_king_rect.topleft)

        # Draw the first black knight at its current position
        black_night_1_rect = pygame.Rect(black_night_pos_1[1] * SQUARE_SIZE, black_night_pos_1[0] * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
        screen.blit(black_night_image, black_night_1_rect.topleft)

        # Draw the second black knight at its current position
        black_night_2_rect = pygame.Rect(black_night_pos_2[1] * SQUARE_SIZE, black_night_pos_2[0] * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
        screen.blit(black_night_image, black_night_2_rect.topleft)

        # Draw the white rook at its current position
        white_rook_rect = pygame.Rect(white_rook_pos[1] * SQUARE_SIZE, white_rook_pos[0] * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
        screen.blit(white_rook_image, white_rook_rect.topleft)

        # Optional: Highlight the selected piecex
        # Если выбрана фигура
        if selected_piece:
            if selected_piece == 'white_king':
                pygame.draw.rect(screen, (0, 255, 0), white_king_rect, 5)  # Green border for selected piece
                draw_moves_king(white_king_pos[0],white_king_pos[1])
            elif selected_piece == 'black_king':
                pygame.draw.rect(screen, (0, 255, 0), black_king_rect, 5)  # Green border for selected piece
                draw_moves_king(black_king_pos[0],black_king_pos[1])
            elif selected_piece == 'white_rook':
                pygame.draw.rect(screen, (0, 255, 0), white_rook_rect, 5)  # Green border for selected piece
                draw_moves_rook(white_rook_pos[0],white_rook_pos[1])
            elif selected_piece == 'black_night_1':
                pygame.draw.rect(screen, (0, 255, 0), black_night_1_rect, 5)  # Green border for selected piece
                draw_moves_knight(black_night_1_rect[0],black_night_1_rect[1])

        # Update the display
        pygame.display.flip()
        pygame.display.update()

    # Quit Pygame
    pygame.quit()

# Запуск окна регистрации
show_registration_window()
